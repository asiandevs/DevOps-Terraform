Step 1 : Taint command
Terraform to replace a resource and run the provisioner again upon the next deployment:
terraform taint <provisioning resource name>
Sample command:
[ec2-user@ip-10-0-14-30 s3]$ terraform taint aws_s3_bucket_versioning.amity01_versioning
Resource instance aws_s3_bucket_versioning.amity01_versioning has been marked as tainted.

See the resource status: marked as tainted
[ec2-user@ip-10-0-14-30 s3]$ terraform state show aws_s3_bucket_versioning.amity01_versioning
# aws_s3_bucket_versioning.amity01_versioning: (tainted)
resource "aws_s3_bucket_versioning" "amity01_versioning" {
    bucket = "amity01"
    id     = "amity01"

    versioning_configuration {
        status = "Enabled"
    }
}

NOTE: on next terraform deploy it will be cleared tainted marked.

Step2: import a resource into configuration management
We can use below command to import existing resource inside terraform configuration 
i: terraform init
ii: terraform import aws_instance.mymanualinstance <instance id>
iv: terraform show

sample output: 
[ec2-user@ip-10-0-14-30 import]$ cat main.tf
provider "aws" {
  region = "us-east-1"
}
resource "aws_instance" "mysrcinstance" {}
[ec2-user@ip-10-0-14-30 import]$ terraform init

Initializing the backend...

Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v4.66.1...
- Installed hashicorp/aws v4.66.1 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
[ec2-user@ip-10-0-14-30 import]$ terraform import aws_instance.mysrcinstance i-017618b7635c55e24
aws_instance.mysrcinstance: Importing from ID "i-017618b7635c55e24"...
aws_instance.mysrcinstance: Import prepared!
  Prepared aws_instance for import
aws_instance.mysrcinstance: Refreshing state... [id=i-017618b7635c55e24]

Import successful!

The resources that were imported are shown above. These resources are now in
your Terraform state and will henceforth be managed by Terraform.

[ec2-user@ip-10-0-14-30 import]$ terraform show
# aws_instance.mysrcinstance:
resource "aws_instance" "mysrcinstance" {
    ami                                  = "ami-0889a44b331db0194"
    arn                                  = "arn:aws:ec2:us-east-1:027777522454:instance/i-017618b7635c55e24"
    associate_public_ip_address          = true
    availability_zone                    = "us-east-1a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-017618b7635c55e24"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "running"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = "mmtrfrm"
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-012ce763942053eb3"
    private_dns                          = "ip-10-0-14-30.ec2.internal"
    private_ip                           = "10.0.14.30"
    public_dns                           = "ec2-3-238-93-20.compute-1.amazonaws.com"
    public_ip                            = "3.238.93.20"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = true
    subnet_id                            = "subnet-0ca9d4f2518126401"
    tags                                 = {
        "Name" = "mmtrfrm03"
    }
    tags_all                             = {
        "Name" = "mmtrfrm03"
    }
    tenancy                              = "default"
    vpc_security_group_ids               = [
        "sg-0c596928f97d73ac5",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/xvda"
        encrypted             = false
        iops                  = 3000
        tags                  = {}
        throughput            = 125
        volume_id             = "vol-05f30f84f06fa01dc"
        volume_size           = 8
        volume_type           = "gp3"
    }
}
